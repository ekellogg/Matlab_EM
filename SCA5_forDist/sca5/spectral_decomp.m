function [out] = spectral_decomp(in,N_samples,N_ev)
% usage: [spect]=spectral_decomp(SCA_struct,100); 

% This function computes the spectral (eigenvalue) decompozition of the SCA
% correlation matrices in the SCA structure file (in, generated by sca5.m),
% and carries out N_samples trials of such decomposition for randomized
% alignments.  The function then makes a plot of eigenvalue spectra for the
% actual and randomized alignments, and outputs a structure that contains
% the eigenvalues and eigenvectors for the actual and randomized
% alignments.  If the optional parameter N_ev is passed, it will return
% only the top N_ev number of randomized eigenvectors.

% ***********************
% Authors: Rama Ranganathan (rama.ranganathan@UTSouthwestern.edu)
%          Olivier Rivoire (olivier.rivoire@ujf-grenoble.fr)
% 8/2011
%
% Copyright R.Ranganathan 1999-2011
%**************************************************************************

% preliminaries, and a default for number of randomized alignments to 100,
% and a default to return all the randomized eigenvectors.

[N_seq,N_pos]=size(in.pwX);
N_aa=20;
if nargin<2
    N_samples=100;
    N_ev=N_pos;
end
if nargin<3;N_ev=N_pos;end

% calculation of eigenvectors and eigenvalues, using the function
% eigenvect.m
[ev,lbd]=eigenvect(in.Cp);

% random trials to get randomly expected eigenvalue spectra.
C_rnd=zeros(N_pos,N_pos);
C_tmp=zeros(N_pos,N_pos,N_samples);

fprintf('%s\n',' ');
disp(['Computing random trials...']);

for s=1:N_samples
    tic;
    for pos=1:N_pos
        perm_seq=randperm(N_seq); 
        algn_rnd(:,pos)=in.algn(perm_seq(:),pos);
    end
    X_rnd=binrep(algn_rnd);
    [wX_rnd]=weight_aln(X_rnd);

    pwX_rnd=zeros(N_seq,N_pos);
    for i=1:N_pos;for a=1:N_aa;pwX_rnd(:,i)=pwX_rnd(:,i)+in.pm(i,a)*wX_rnd(:,i,a);end;end 
    
    C_tmp(:,:,s)=abs((pwX_rnd'*pwX_rnd)/N_seq-mean(pwX_rnd)'*mean(pwX_rnd));
    C_rnd=C_rnd+squeeze(C_tmp(:,:,s));
    
    disp([num2str(s) '    ' num2str(toc) ' seconds']);
    exec_time(s)=toc;
end

C_rnd=C_rnd./N_samples;

fprintf('%s\n',' ');
disp(['Total time    ' num2str(sum(exec_time)) ' seconds']);

% Now, we plot the actual and randomized eigenspectra
lbd_rnd=zeros(N_samples,N_pos);
ev_rnd=zeros(N_samples,N_pos,N_ev);
lbd_rnd_tmp=zeros(N_pos,1);
ev_rnd_tmp=zeros(N_pos,N_pos);

for s=1:N_samples
    [ev_rnd_tmp,lbd_rnd_tmp]=eigenvect(C_tmp(:,:,s));  
    lbd_rnd(s,:)=lbd_rnd_tmp;   
    ev_rnd(s,:,:)=ev_rnd_tmp(:,1:N_ev);
end
h_eigenspectrum=figure; set(h_eigenspectrum,'Name','Eigenmodes of SCA matrix'); clf; 

[yhist,xhist]=hist(lbd,N_pos); bar(xhist,yhist,'b'); axis([min(lbd) 1.1*max(lbd) 0 1.4*max(yhist)]);hold on
xlabel('eigenvalue','FontSize',10,'FontWeight','bold');
ylabel('number','FontSize',10,'FontWeight','bold');
[n]=hist(lbd_rnd(:),xhist);
plot(xhist,n/N_samples,'r','LineWidth',1.5); axis([min(lbd) 1.1*max(lbd) 0 1.4*max(yhist)]);
grid on;hold off

% Make outputs
out.lbdpos=lbd;
out.evpos=ev;
out.lbdposrnd=lbd_rnd;
out.evposrnd=ev_rnd;

end

